import os
import uuid
from base64 import urlsafe_b64encode
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message
from aiogram.filters import Command
import httpx
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
load_dotenv()

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY")
SUPABASE_TABLE = "one_time_keys"

if not all([BOT_TOKEN, SUPABASE_URL, SUPABASE_ANON_KEY]):
    raise EnvironmentError("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, SUPABASE_URL, SUPABASE_ANON_KEY")

bot = Bot(token=BOT_TOKEN)
router = Router()
dp = Dispatcher()
dp.include_router(router)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ URL-safe –∫–ª—é—á–∞
def generate_key():
    return urlsafe_b64encode(uuid.uuid4().bytes).decode().rstrip("=")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ user_id
async def save_key_with_user(key: str, user_id: int):
    async with httpx.AsyncClient() as client:
        await client.post(
            f"{SUPABASE_URL}/rest/v1/{SUPABASE_TABLE}",
            headers={
                "apikey": SUPABASE_ANON_KEY,
                "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
                "Content-Type": "application/json",
                "Prefer": "return=minimal"
            },
            json={"key": key, "used": False, "user_id": str(user_id)}
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def has_active_key(user_id: int) -> bool:
    async with httpx.AsyncClient() as client:
        resp = await client.get(
            f"{SUPABASE_URL}/rest/v1/{SUPABASE_TABLE}",
            headers={
                "apikey": SUPABASE_ANON_KEY,
                "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
            },
            params={
                "user_id": f"eq.{user_id}",
                "used": "eq.false"
            }
        )
        return len(resp.json()) > 0

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üîê –ü—Ä–∏–≤–µ—Ç! –Ø –≤—ã–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞.\n"
        "–ù–∞–ø–∏—à–∏ /getkey, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á."
    )

@router.message(Command("getkey"))
async def get_key(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"

    if await has_active_key(user_id):
        await message.answer(
            "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á. –ù–æ–≤—ã–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )
        return

    key = generate_key()
    await save_key_with_user(key, user_id)

    await message.answer(
        f"üîë –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á:\n\n<code>{key}</code>\n\n"
        f"–ü—Ä–∏–≤—è–∑–∞–Ω –∫: @{username} (ID: {user_id})\n"
        "–°–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ ‚Äî –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω!",
        parse_mode="HTML"
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())